{"version":3,"sources":["wsworker.js","LastTrade.js","Liquidity.js","App.js","index.js"],"names":["Worker_fn","Worker","LastTrade","props","Fragment","trade","Grid","container","alignItems","spacing","item","xs","Typography","color","align","symbol","noWrap","style","price","toLocaleString","undefined","minimumFractionDigits","qty","zeroMinWidth","ReactTimeAgo","date","locale","Liquidity","useState","valBtcInput","setBtcInput","delay","isRunning","callback","savedCallback","useRef","useEffect","current","tick","id","setInterval","clearInterval","useInterval","calculateLiquidity","liquidityTable","liquidity","map","o","direction","justify","Box","my","Divider","wrap","toBuy","canExecute","maximumFractionDigits","toSell","cyan","vwap","slice","transactionVal","bestPrice","worstPrice","noValidate","autoComplete","onSubmit","e","preventDefault","TextField","label","type","InputProps","inputProps","min","InputLabelProps","shrink","variant","onChange","a","Number","target","value","App","theme","useTheme","wsworker","WsWorker","onmessage","r","data","setInitialized","btcusdTradeDispatch","btcsgdTradeDispatch","setLiquidity","initialized","useReducer","tradeReducer","btcusdTrade","btcsgdTrade","state","action","oldprice","quantity","Date","timestamp","palette","success","dark","error","text","Container","maxWidth","className","p","Button","onClick","postMessage","exch","Paper","elevation","btc","createMuiTheme","primary","TimeAgo","addDefaultLocale","en","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.e7c07f74.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/wsworker.62bef21c.worker.js\");\n}\n","import ReactTimeAgo from \"react-time-ago\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nfunction LastTrade(props) {\r\n    return (\r\n        <React.Fragment>\r\n            {props.trade && (\r\n                <Grid container alignItems=\"baseline\" spacing={1}>\r\n                    <Grid item xs={3}>\r\n                        <Typography color=\"textSecondary\" align=\"left\">\r\n                            {props.trade.symbol}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3}>\r\n                        <Typography noWrap style={{ color: props.trade.color }}>\r\n                            {props.trade.price.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Typography noWrap>\r\n                            {props.trade.qty.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 8,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={3} zeroMinWidth>\r\n                        <Typography noWrap color=\"textSecondary\">\r\n                            <ReactTimeAgo\r\n                                date={props.trade.date}\r\n                                locale=\"en-US\"\r\n                            />\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default LastTrade;\r\n","import { Grid, Typography, TextField, Divider, Box } from \"@material-ui/core\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport { cyan } from \"@material-ui/core/colors\";\r\nfunction Liquidity(props) {\r\n    const [valBtcInput, setBtcInput] = useState(1);\r\n    const [delay, setDelay] = useState(100);\r\n    const [isRunning, setIsRunning] = useState(true);\r\n\r\n    useInterval(\r\n        () => {\r\n            props.calculateLiquidity(valBtcInput);\r\n        },\r\n        isRunning ? delay : null\r\n    );\r\n\r\n    const liquidityTable = props.liquidity.map((o) => (\r\n        <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"stretch\"\r\n            spacing={0}\r\n            key={o.symbol}\r\n        >\r\n            <Grid item xs={12}>\r\n                <Box my={2}></Box>\r\n                <Divider />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid\r\n                    container\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    wrap=\"nowrap\"\r\n                    spacing={1}\r\n                >\r\n                    <Grid item xs={4}>\r\n                        <Typography color=\"primary\" align=\"left\" noWrap>\r\n                            {o.symbol}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography color=\"textSecondary\" align=\"right\" noWrap>\r\n                            Market Buy\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography color=\"textSecondary\" align=\"right\" noWrap>\r\n                            Market Sell\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Divider />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid\r\n                    container\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    wrap=\"nowrap\"\r\n                    spacing={1}\r\n                >\r\n                    <Grid item xs={4}>\r\n                        <Typography color=\"textSecondary\" align=\"left\" noWrap>\r\n                            Available Liquidity\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography\r\n                            color={\r\n                                o.toBuy.canExecute < valBtcInput\r\n                                    ? \"error\"\r\n                                    : \"textPrimary\"\r\n                            }\r\n                            align=\"right\"\r\n                            noWrap\r\n                        >\r\n                            {o.toBuy.canExecute.toLocaleString(undefined, {\r\n                                maximumFractionDigits: 8,\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography\r\n                            color={\r\n                                o.toSell.canExecute < valBtcInput\r\n                                    ? \"error\"\r\n                                    : \"textPrimary\"\r\n                            }\r\n                            align=\"right\"\r\n                            noWrap\r\n                        >\r\n                            {o.toSell.canExecute.toLocaleString(undefined, {\r\n                                maximumFractionDigits: 8,\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid\r\n                    container\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"baseline\"\r\n                    wrap=\"nowrap\"\r\n                >\r\n                    <Grid item xs={4}>\r\n                        <Typography\r\n                            style={{ color: cyan[200] }}\r\n                            align=\"left\"\r\n                            noWrap\r\n                        >\r\n                            VWAP\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography\r\n                            style={{ color: cyan[200] }}\r\n                            align=\"right\"\r\n                            noWrap\r\n                        >\r\n                            {o.toBuy.vwap.toLocaleString(undefined, {\r\n                                maximumFractionDigits: 2,\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography\r\n                            style={{ color: cyan[200] }}\r\n                            align=\"right\"\r\n                            noWrap\r\n                        >\r\n                            {o.toSell.vwap.toLocaleString(undefined, {\r\n                                maximumFractionDigits: 2,\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid\r\n                    container\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"baseline\"\r\n                    wrap=\"nowrap\"\r\n                >\r\n                    <Grid item xs={4}>\r\n                        <Typography color=\"textSecondary\" align=\"left\" noWrap>\r\n                            Transaction Amt. {o.symbol.slice(-3)}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography align=\"right\" noWrap>\r\n                            {o.toBuy.transactionVal.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                                maximumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography align=\"right\" noWrap>\r\n                            {o.toSell.transactionVal.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                                maximumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid\r\n                    container\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"baseline\"\r\n                    wrap=\"nowrap\"\r\n                >\r\n                    <Grid item xs={4}>\r\n                        <Typography color=\"textSecondary\" align=\"left\" noWrap>\r\n                            Best Price\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography align=\"right\" noWrap>\r\n                            {o.toBuy.bestPrice.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                                maximumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography align=\"right\" noWrap>\r\n                            {o.toSell.bestPrice.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                                maximumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid\r\n                    container\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"baseline\"\r\n                    wrap=\"nowrap\"\r\n                >\r\n                    <Grid item xs={4}>\r\n                        <Typography color=\"textSecondary\" align=\"left\" noWrap>\r\n                            Worst Price\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography align=\"right\" noWrap>\r\n                            {o.toBuy.worstPrice.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                                maximumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography align=\"right\" noWrap>\r\n                            {o.toSell.worstPrice.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                                maximumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Divider />\r\n            </Grid>\r\n        </Grid>\r\n    ));\r\n    return (\r\n        <React.Fragment>\r\n            <Grid\r\n                container\r\n                direction=\"column\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"stretch\"\r\n                spacing={2}\r\n            >\r\n                <Grid item xs={12}>\r\n                    <Typography>Liquidity Price checker</Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <form\r\n                        noValidate\r\n                        autoComplete=\"off\"\r\n                        onSubmit={(e) => e.preventDefault()}\r\n                    >\r\n                        <TextField\r\n                            id=\"filled-number\"\r\n                            label=\"no. of BTC\"\r\n                            type=\"number\"\r\n                            InputProps={{\r\n                                inputProps: {\r\n                                    min: 0,\r\n                                },\r\n                            }}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            variant=\"filled\"\r\n                            onChange={async (e) => {\r\n                                if (Number(e.target.value) >= 0) {\r\n                                    setBtcInput(e.target.value);\r\n                                }\r\n                            }}\r\n                            value={valBtcInput}\r\n                        />\r\n                    </form>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {liquidityTable}\r\n                </Grid>\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n}\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\nexport default Liquidity;\r\n","import {\r\n    Box,\r\n    Paper,\r\n    Typography,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\nimport \"./App.css\";\r\nimport React, { useRef, useEffect, useReducer, useState } from \"react\";\r\nimport WsWorker from \"worker-loader!./wsworker.js\"; // eslint-disable-line import/no-webpack-loader-syntax\r\nimport LastTrade from \"./LastTrade\";\r\nimport Liquidity from \"./Liquidity\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nfunction App() {\r\n    const theme = useTheme();\r\n    const wsworker = useRef(null);\r\n    useEffect(() => {\r\n        wsworker.current = new WsWorker();\r\n        wsworker.current.onmessage = (e) => {\r\n            const r = e.data;\r\n            if (r.type === \"initialized\") {\r\n                setInitialized(r.data);\r\n            } else if (r.symbol === \"BTCUSD\" && r.type === \"trade\") {\r\n                btcusdTradeDispatch(r.data);\r\n            } else if (r.symbol === \"BTCSGD\" && r.type === \"trade\") {\r\n                btcsgdTradeDispatch(r.data);\r\n            } else if (r.type === \"liquidity\") {\r\n                setLiquidity(r.data);\r\n            }\r\n        };\r\n    }, [wsworker]);\r\n    const [initialized, setInitialized] = useState(false);\r\n    const [liquidity, setLiquidity] = useState([]);\r\n    const [btcusdTrade, btcusdTradeDispatch] = useReducer(tradeReducer, null);\r\n    const [btcsgdTrade, btcsgdTradeDispatch] = useReducer(tradeReducer, null);\r\n    function calculateLiquidity(btc) {\r\n        wsworker.current.postMessage({\r\n            action: \"liquidity\",\r\n            exch: \"gemini\",\r\n            btc: btc,\r\n        });\r\n    }\r\n    function tradeReducer(state, action) {\r\n        const oldprice = state?.price ?? 0;\r\n        const r = {\r\n            symbol: action.symbol,\r\n            price: Number(action.price),\r\n            qty: Number(action.quantity),\r\n            date: new Date(action.timestamp),\r\n            color:\r\n                Number(action.price) > oldprice\r\n                    ? theme.palette.success.dark\r\n                    : Number(action.price) < oldprice\r\n                    ? theme.palette.error.dark\r\n                    : theme.palette.text,\r\n        };\r\n        return r;\r\n    }\r\n    return (\r\n        <Container maxWidth=\"sm\" className=\"App\">\r\n            <Box p={2}>\r\n                <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"stretch\"\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            onClick={(e) => {\r\n                                wsworker.current.postMessage({\r\n                                    action: \"connect\",\r\n                                    exch: \"gemini\",\r\n                                });\r\n                            }}\r\n                        >\r\n                            Connect Gemini\r\n                        </Button>\r\n                    </Grid>\r\n                    {initialized && (\r\n                        <React.Fragment>\r\n                            <Grid item xs={12}>\r\n                                <Paper elevation={4}>\r\n                                    <Box p={2}>\r\n                                        <Grid\r\n                                            container\r\n                                            justify=\"flex-start\"\r\n                                            alignItems=\"baseline\"\r\n                                            spacing={1}\r\n                                        >\r\n                                            <Grid item xs={12}>\r\n                                                <Typography align=\"center\">\r\n                                                    Last Trade\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <LastTrade\r\n                                                    trade={btcusdTrade}\r\n                                                ></LastTrade>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <LastTrade\r\n                                                    trade={btcsgdTrade}\r\n                                                ></LastTrade>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <Grid\r\n                                                    container\r\n                                                    justify=\"flex-start\"\r\n                                                    alignItems=\"baseline\"\r\n                                                    spacing={1}\r\n                                                    wrap=\"nowrap\"\r\n                                                >\r\n                                                    <Grid item xs={6}>\r\n                                                        <Typography color=\"textSecondary\">\r\n                                                            USD/SGD implied FX:\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid\r\n                                                        item\r\n                                                        xs={6}\r\n                                                        zeroMinWidth\r\n                                                    >\r\n                                                        <Typography\r\n                                                            color=\"primary\"\r\n                                                            noWrap\r\n                                                        >\r\n                                                            {btcsgdTrade?.price &&\r\n                                                                btcusdTrade?.price &&\r\n                                                                (\r\n                                                                    btcsgdTrade.price /\r\n                                                                    btcusdTrade.price\r\n                                                                ).toLocaleString(\r\n                                                                    undefined,\r\n                                                                    {\r\n                                                                        minimumFractionDigits: 8,\r\n                                                                    }\r\n                                                                )}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Box>\r\n                                </Paper>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Paper elevation={4}>\r\n                                    <Box p={2}>\r\n                                        <Liquidity\r\n                                            liquidity={liquidity}\r\n                                            calculateLiquidity={\r\n                                                calculateLiquidity\r\n                                            }\r\n                                        />\r\n                                    </Box>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </React.Fragment>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport TimeAgo from \"javascript-time-ago\";\r\nimport en from \"javascript-time-ago/locale/en\";\r\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\r\nimport { cyan } from \"@material-ui/core/colors\";\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: cyan,\r\n    },\r\n});\r\nTimeAgo.addDefaultLocale(en);\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <App />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}