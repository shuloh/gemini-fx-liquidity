{"version":3,"sources":["wsworker.js","LastTrade.js","Liquidity.js","App.js","index.js"],"names":["Worker_fn","Worker","LastTrade","props","Fragment","trade","Grid","container","alignItems","spacing","wrap","item","sm","Typography","color","align","symbol","noWrap","style","price","toLocaleString","undefined","minimumFractionDigits","qty","zeroMinWidth","ReactTimeAgo","date","locale","Liquidity","useState","valBtcInput","setBtcInput","delay","isRunning","callback","savedCallback","useRef","useEffect","current","tick","id","setInterval","clearInterval","useInterval","calculateLiquidity","liquidityTable","liquidity","map","o","Table","TableHead","TableRow","TableCell","TableBody","toBuy","canExecute","maximumFractionDigits","toSell","vwap","transactionVal","console","log","bestPrice","worstPrice","justify","noValidate","autoComplete","onSubmit","e","preventDefault","TextField","label","type","InputProps","inputProps","min","InputLabelProps","shrink","variant","onChange","a","Number","target","value","App","theme","useTheme","wsworker","WsWorker","onmessage","r","data","setInitialized","btcusdTradeDispatch","btcsgdTradeDispatch","setLiquidity","initialized","useReducer","tradeReducer","btcusdTrade","btcsgdTrade","state","action","oldprice","quantity","Date","timestamp","palette","success","dark","error","Box","p","Container","maxWidth","className","xs","Button","onClick","postMessage","exch","Paper","elevation","m","btc","createMuiTheme","primary","cyan","secondary","red","TimeAgo","addDefaultLocale","en","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.81d2f4aa.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/wsworker.b5361cde.worker.js\");\n}\n","import ReactTimeAgo from \"react-time-ago\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nfunction LastTrade(props) {\r\n    return (\r\n        <React.Fragment>\r\n            {props.trade && (\r\n                <Grid container alignItems=\"baseline\" spacing={1} wrap=\"nowrap\">\r\n                    <Grid item sm={3}>\r\n                        <Typography color=\"textSecondary\" align=\"left\">\r\n                            {props.trade.symbol}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item sm={3}>\r\n                        <Typography noWrap style={{ color: props.trade.color }}>\r\n                            {props.trade.price.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item sm={3}>\r\n                        <Typography noWrap>\r\n                            {props.trade.qty.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 8,\r\n                            })}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item sm={3} zeroMinWidth>\r\n                        <Typography noWrap color=\"textSecondary\">\r\n                            <ReactTimeAgo\r\n                                date={props.trade.date}\r\n                                locale=\"en-US\"\r\n                            />\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default LastTrade;\r\n","import { Grid, Typography, TextField } from \"@material-ui/core\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nfunction Liquidity(props) {\r\n    const [valBtcInput, setBtcInput] = useState(1);\r\n    const [delay, setDelay] = useState(100);\r\n    const [isRunning, setIsRunning] = useState(true);\r\n\r\n    useInterval(\r\n        () => {\r\n            props.calculateLiquidity(valBtcInput);\r\n        },\r\n        isRunning ? delay : null\r\n    );\r\n\r\n    const liquidityTable = props.liquidity.map((o) => (\r\n        <Grid item sm={12} key={o.symbol}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <Typography color=\"primary\">{o.symbol}</Typography>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">Market Buy</TableCell>\r\n                        <TableCell align=\"right\">Market Sell</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell>Available Qty</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {o.toBuy.canExecute.toLocaleString(undefined, {\r\n                                maximumFractionDigits: 8,\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {o.toSell.canExecute.toLocaleString(undefined, {\r\n                                maximumFractionDigits: 8,\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>VWAP (average price)</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {o.toBuy.vwap.toLocaleString(undefined, {\r\n                                maximumFractionDigits: 2,\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {o.toSell.vwap.toLocaleString(undefined, {\r\n                                maximumFractionDigits: 2,\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>Transaction Value</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {o.toBuy.transactionVal.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                                maximumFractionDigits: 2,\r\n                            })}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {o.toSell.transactionVal.toLocaleString(undefined, {\r\n                                maximumFractionDigits: 2,\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>Best Bid/Ask</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {console.log()}\r\n                            {o.toBuy.bestPrice.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {o.toSell.bestPrice.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>Worst Bid/Ask</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {o.toBuy.worstPrice.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {o.toSell.worstPrice.toLocaleString(undefined, {\r\n                                minimumFractionDigits: 2,\r\n                            })}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Grid>\r\n    ));\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container alignItems=\"baseline\" spacing={3} justify=\"center\">\r\n                <Grid item sm={12}>\r\n                    <Typography>Liquidity checker</Typography>\r\n                </Grid>\r\n                <Grid item sm={12}>\r\n                    <form\r\n                        noValidate\r\n                        autoComplete=\"off\"\r\n                        onSubmit={(e) => e.preventDefault()}\r\n                    >\r\n                        <TextField\r\n                            id=\"filled-number\"\r\n                            label=\"no. of BTC\"\r\n                            type=\"number\"\r\n                            InputProps={{\r\n                                inputProps: {\r\n                                    min: 0,\r\n                                },\r\n                            }}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            variant=\"filled\"\r\n                            onChange={async (e) => {\r\n                                if (Number(e.target.value) >= 0) {\r\n                                    setBtcInput(e.target.value);\r\n                                }\r\n                            }}\r\n                            value={valBtcInput}\r\n                        />\r\n                    </form>\r\n                </Grid>\r\n                {liquidityTable}\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n}\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\nexport default Liquidity;\r\n","import {\r\n    Box,\r\n    Paper,\r\n    Typography,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\nimport \"./App.css\";\r\nimport React, { useRef, useEffect, useReducer, useState } from \"react\";\r\nimport WsWorker from \"worker-loader!./wsworker.js\"; // eslint-disable-line import/no-webpack-loader-syntax\r\nimport LastTrade from \"./LastTrade\";\r\nimport Liquidity from \"./Liquidity\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nfunction App() {\r\n    const theme = useTheme();\r\n    const wsworker = useRef(null);\r\n    useEffect(() => {\r\n        wsworker.current = new WsWorker();\r\n        wsworker.current.onmessage = (e) => {\r\n            const r = e.data;\r\n            if (r.type === \"initialized\") {\r\n                setInitialized(r.data);\r\n            } else if (r.symbol === \"BTCUSD\" && r.type === \"trade\") {\r\n                btcusdTradeDispatch(r.data);\r\n            } else if (r.symbol === \"BTCSGD\" && r.type === \"trade\") {\r\n                btcsgdTradeDispatch(r.data);\r\n            } else if (r.type === \"liquidity\") {\r\n                setLiquidity(r.data);\r\n            }\r\n        };\r\n    }, [wsworker]);\r\n    const [initialized, setInitialized] = useState(false);\r\n    const [liquidity, setLiquidity] = useState([]);\r\n    const [btcusdTrade, btcusdTradeDispatch] = useReducer(tradeReducer, null);\r\n    const [btcsgdTrade, btcsgdTradeDispatch] = useReducer(tradeReducer, null);\r\n    function calculateLiquidity(btc) {\r\n        wsworker.current.postMessage({\r\n            action: \"liquidity\",\r\n            exch: \"gemini\",\r\n            btc: btc,\r\n        });\r\n    }\r\n    function tradeReducer(state, action) {\r\n        const oldprice = state?.price ?? 0;\r\n        const r = {\r\n            symbol: action.symbol,\r\n            price: Number(action.price),\r\n            qty: Number(action.quantity),\r\n            date: new Date(action.timestamp),\r\n            color:\r\n                Number(action.price) > oldprice\r\n                    ? theme.palette.success.dark\r\n                    : Number(action.price) < oldprice\r\n                    ? theme.palette.error.dark\r\n                    : \"textPrimary\",\r\n        };\r\n        return r;\r\n    }\r\n    return (\r\n        <Box p={2}>\r\n            <Container maxWidth=\"sm\" className=\"App\">\r\n                <Grid container justify=\"flex-start\" alignItems=\"baseline\">\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            onClick={(e) => {\r\n                                wsworker.current.postMessage({\r\n                                    action: \"connect\",\r\n                                    exch: \"gemini\",\r\n                                });\r\n                            }}\r\n                        >\r\n                            Connect Gemini\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                {initialized && (\r\n                    <React.Fragment>\r\n                        <Paper elevation={4}>\r\n                            <Box p={1} m={2}>\r\n                                <Grid\r\n                                    container\r\n                                    justify=\"flex-start\"\r\n                                    spacing={1}\r\n                                >\r\n                                    <Grid item sm={12}>\r\n                                        <Typography align=\"center\">\r\n                                            Last Trade\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item sm={12}>\r\n                                        <LastTrade\r\n                                            trade={btcusdTrade}\r\n                                        ></LastTrade>\r\n                                    </Grid>\r\n                                    <Grid item sm={12}>\r\n                                        <LastTrade\r\n                                            trade={btcsgdTrade}\r\n                                        ></LastTrade>\r\n                                    </Grid>\r\n                                    <Grid item sm={6}>\r\n                                        <Typography\r\n                                            align=\"left\"\r\n                                            color=\"textSecondary\"\r\n                                        >\r\n                                            USD/SGD implied FX:\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item sm={6}>\r\n                                        <Typography\r\n                                            align=\"left\"\r\n                                            color=\"primary\"\r\n                                        >\r\n                                            {btcsgdTrade?.price &&\r\n                                                btcusdTrade?.price &&\r\n                                                (\r\n                                                    btcsgdTrade.price /\r\n                                                    btcusdTrade.price\r\n                                                ).toLocaleString(undefined, {\r\n                                                    minimumFractionDigits: 8,\r\n                                                })}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                        </Paper>\r\n                        <Paper elevation={4}>\r\n                            <Box p={2} m={2}>\r\n                                <Liquidity\r\n                                    liquidity={liquidity}\r\n                                    calculateLiquidity={calculateLiquidity}\r\n                                />\r\n                            </Box>\r\n                        </Paper>\r\n                    </React.Fragment>\r\n                )}\r\n            </Container>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport TimeAgo from \"javascript-time-ago\";\r\nimport en from \"javascript-time-ago/locale/en\";\r\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\r\nimport { cyan, red } from \"@material-ui/core/colors\";\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: cyan,\r\n        secondary: cyan,\r\n        red: red,\r\n    },\r\n});\r\nTimeAgo.addDefaultLocale(en);\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <App />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}